/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const IDL_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  140, 36, 166, 2, 103, 197, 33, 164,
]);

export function getIdlAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(IDL_ACCOUNT_DISCRIMINATOR);
}

export type IdlAccount = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  dataLen: number;
};

export type IdlAccountArgs = { authority: Address; dataLen: number };

export function getIdlAccountEncoder(): Encoder<IdlAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['dataLen', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: IDL_ACCOUNT_DISCRIMINATOR })
  );
}

export function getIdlAccountDecoder(): Decoder<IdlAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['dataLen', getU32Decoder()],
  ]);
}

export function getIdlAccountCodec(): Codec<IdlAccountArgs, IdlAccount> {
  return combineCodec(getIdlAccountEncoder(), getIdlAccountDecoder());
}

export function decodeIdlAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<IdlAccount, TAddress>;
export function decodeIdlAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<IdlAccount, TAddress>;
export function decodeIdlAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<IdlAccount, TAddress> | MaybeAccount<IdlAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getIdlAccountDecoder()
  );
}

export async function fetchIdlAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<IdlAccount, TAddress>> {
  const maybeAccount = await fetchMaybeIdlAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeIdlAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<IdlAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeIdlAccount(maybeAccount);
}

export async function fetchAllIdlAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<IdlAccount>[]> {
  const maybeAccounts = await fetchAllMaybeIdlAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeIdlAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<IdlAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeIdlAccount(maybeAccount));
}

export function getIdlAccountSize(): number {
  return 44;
}
