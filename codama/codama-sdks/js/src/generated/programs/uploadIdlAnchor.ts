/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCloseBufferInstruction,
  type ParsedCreateBufferInstruction,
  type ParsedInitializeInstruction,
  type ParsedResizeInstruction,
  type ParsedSetBufferInstruction,
  type ParsedWriteBufferInstruction,
} from '../instructions';

export const UPLOAD_IDL_ANCHOR_PROGRAM_ADDRESS =
  'idLB41CuMPpWZmQGGxpsxbyGDWWzono4JnFLJxQakrE' as Address<'idLB41CuMPpWZmQGGxpsxbyGDWWzono4JnFLJxQakrE'>;

export enum UploadIdlAnchorAccount {
  IdlAccount,
}

export function identifyUploadIdlAnchorAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): UploadIdlAnchorAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 36, 166, 2, 103, 197, 33, 164])
      ),
      0
    )
  ) {
    return UploadIdlAnchorAccount.IdlAccount;
  }
  throw new Error(
    'The provided account could not be identified as a uploadIdlAnchor account.'
  );
}

export enum UploadIdlAnchorInstruction {
  CloseBuffer,
  CreateBuffer,
  Initialize,
  Resize,
  SetBuffer,
  WriteBuffer,
}

export function identifyUploadIdlAnchorInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): UploadIdlAnchorInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 114, 179, 58, 57, 45, 194, 172])
      ),
      0
    )
  ) {
    return UploadIdlAnchorInstruction.CloseBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 76, 101, 74, 224, 249, 104, 170])
      ),
      0
    )
  ) {
    return UploadIdlAnchorInstruction.CreateBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return UploadIdlAnchorInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([74, 27, 74, 155, 56, 134, 175, 125])
      ),
      0
    )
  ) {
    return UploadIdlAnchorInstruction.Resize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 212, 241, 0, 78, 93, 17, 51])
      ),
      0
    )
  ) {
    return UploadIdlAnchorInstruction.SetBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 194, 69, 154, 75, 169, 228, 85])
      ),
      0
    )
  ) {
    return UploadIdlAnchorInstruction.WriteBuffer;
  }
  throw new Error(
    'The provided instruction could not be identified as a uploadIdlAnchor instruction.'
  );
}

export type ParsedUploadIdlAnchorInstruction<
  TProgram extends string = 'idLB41CuMPpWZmQGGxpsxbyGDWWzono4JnFLJxQakrE',
> =
  | ({
      instructionType: UploadIdlAnchorInstruction.CloseBuffer;
    } & ParsedCloseBufferInstruction<TProgram>)
  | ({
      instructionType: UploadIdlAnchorInstruction.CreateBuffer;
    } & ParsedCreateBufferInstruction<TProgram>)
  | ({
      instructionType: UploadIdlAnchorInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: UploadIdlAnchorInstruction.Resize;
    } & ParsedResizeInstruction<TProgram>)
  | ({
      instructionType: UploadIdlAnchorInstruction.SetBuffer;
    } & ParsedSetBufferInstruction<TProgram>)
  | ({
      instructionType: UploadIdlAnchorInstruction.WriteBuffer;
    } & ParsedWriteBufferInstruction<TProgram>);
