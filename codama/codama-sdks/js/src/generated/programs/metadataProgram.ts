/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCloseBufferInstruction,
  type ParsedCreateBufferInstruction,
  type ParsedInitializeInstruction,
  type ParsedResizeInstruction,
  type ParsedSetAuthorityInstruction,
  type ParsedSetBufferInstruction,
  type ParsedWriteBufferInstruction,
} from '../instructions';

export const METADATA_PROGRAM_PROGRAM_ADDRESS =
  'pmetaypqG6SiB47xMigYVMAkuHDWeSDXcv3zzDrJJvA' as Address<'pmetaypqG6SiB47xMigYVMAkuHDWeSDXcv3zzDrJJvA'>;

export enum MetadataProgramAccount {
  IdlAccount,
}

export function identifyMetadataProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MetadataProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 36, 166, 2, 103, 197, 33, 164])
      ),
      0
    )
  ) {
    return MetadataProgramAccount.IdlAccount;
  }
  throw new Error(
    'The provided account could not be identified as a metadataProgram account.'
  );
}

export enum MetadataProgramInstruction {
  CloseBuffer,
  CreateBuffer,
  Initialize,
  Resize,
  SetAuthority,
  SetBuffer,
  WriteBuffer,
}

export function identifyMetadataProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MetadataProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 114, 179, 58, 57, 45, 194, 172])
      ),
      0
    )
  ) {
    return MetadataProgramInstruction.CloseBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 76, 101, 74, 224, 249, 104, 170])
      ),
      0
    )
  ) {
    return MetadataProgramInstruction.CreateBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return MetadataProgramInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([74, 27, 74, 155, 56, 134, 175, 125])
      ),
      0
    )
  ) {
    return MetadataProgramInstruction.Resize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 250, 37, 21, 110, 163, 26, 121])
      ),
      0
    )
  ) {
    return MetadataProgramInstruction.SetAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 212, 241, 0, 78, 93, 17, 51])
      ),
      0
    )
  ) {
    return MetadataProgramInstruction.SetBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 194, 69, 154, 75, 169, 228, 85])
      ),
      0
    )
  ) {
    return MetadataProgramInstruction.WriteBuffer;
  }
  throw new Error(
    'The provided instruction could not be identified as a metadataProgram instruction.'
  );
}

export type ParsedMetadataProgramInstruction<
  TProgram extends string = 'pmetaypqG6SiB47xMigYVMAkuHDWeSDXcv3zzDrJJvA',
> =
  | ({
      instructionType: MetadataProgramInstruction.CloseBuffer;
    } & ParsedCloseBufferInstruction<TProgram>)
  | ({
      instructionType: MetadataProgramInstruction.CreateBuffer;
    } & ParsedCreateBufferInstruction<TProgram>)
  | ({
      instructionType: MetadataProgramInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: MetadataProgramInstruction.Resize;
    } & ParsedResizeInstruction<TProgram>)
  | ({
      instructionType: MetadataProgramInstruction.SetAuthority;
    } & ParsedSetAuthorityInstruction<TProgram>)
  | ({
      instructionType: MetadataProgramInstruction.SetBuffer;
    } & ParsedSetBufferInstruction<TProgram>)
  | ({
      instructionType: MetadataProgramInstruction.WriteBuffer;
    } & ParsedWriteBufferInstruction<TProgram>);
